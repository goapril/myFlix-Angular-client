{"ast":null,"code":"import { catchError } from 'rxjs/internal/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\"; //Declaring the api url that will provide data for the client app\n\nconst apiUrl = 'https://movie-api-myflixdb.herokuapp.com/'; // API call to register new user account\n\nexport let FetchApiDataService = /*#__PURE__*/(() => {\n  class FetchApiDataService {\n    // Inject the HttpClient module to the constructor params\n    // This will provide HttpClient to the entire class, making it available via this.http\n    constructor(http) {\n      this.http = http;\n    } // Making the api call for the user registration endpoint\n\n\n    userRegistration(userData) {\n      //console.log(userData);\n      return this.http.post(apiUrl + 'users', userData).pipe(catchError(this.handleError));\n    } // Making the api call for the login endpoint\n\n\n    userLogin(userData) {\n      //console.log(userData);\n      return this.http.post(apiUrl + 'login', userData).pipe(catchError(this.handleError));\n    } // Making the api call to get all movies endpoint\n\n\n    getAllMovies() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    getMovie() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies/:title', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    getDirector() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies/director/:name', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    getGenre() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies/genre/:name', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    getUser() {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      return this.http.get(apiUrl + 'users/' + user, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    getFavoriteMovie(id) {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      return this.http.get(apiUrl + 'users/' + user + '/movies/' + id, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    addFavoriteMovie(id) {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      return this.http.post(apiUrl + 'users/' + user + '/movies/' + id, id, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    editUser(userData) {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      return this.http.put(apiUrl + 'users/' + user, userData, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    deleteUser() {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      return this.http.delete(apiUrl + 'users/' + user, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    deleteMovie(id) {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      return this.http.delete(apiUrl + 'users/' + user + '/movies/' + id, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    } // non-typed response extraction\n\n\n    extractResponseData(res) {\n      console.log(res);\n      const body = res;\n      return body || {};\n    } // Handles errors to register new user account\n\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n        console.log(error);\n      }\n\n      return throwError('Something bad happened.');\n    }\n\n  }\n\n  FetchApiDataService.ɵfac = function FetchApiDataService_Factory(t) {\n    return new (t || FetchApiDataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  FetchApiDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FetchApiDataService,\n    factory: FetchApiDataService.ɵfac,\n    providedIn: 'root'\n  });\n  return FetchApiDataService;\n})();","map":null,"metadata":{},"sourceType":"module"}